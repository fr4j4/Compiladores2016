//-------- [1] PRIMERA SECCION 'Declaraciones preliminares'
import java_cup.runtime.*;
import org.fusesource.jansi.*;
import  org.fusesource.jansi.*;
//import static org.fusesource.jansi.Ansi.Color.*;


parser code {:


    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" en linea "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", columna "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:};

init with {: AnsiConsole.systemInstall(); :};

//-------- [2] SEGUNDA SECCION 'Declaracion de terminales y no-terminales'
terminal          IGUAL, MENOS, MAS, DIV, POR, LPAREN,RPAREN,
                  ID,FIN,SI,ENTONCES,LEER, MENOR, 
                  MAYOR,PCOMA,TEXTO,ENTER;

terminal Integer  CONST,INICIO,ESCRIBIR;

non terminal      S,
                  inst_1,
                  inst_2,
                  inst_leer,
                  inst_escribir,
                  inst_si,
                  inst_asig,
                  cond
                  ;

non terminal 1 exp;

//-------- [3] TERCERA SECCION 'Precedencia y asociatividad de terminales'

precedence left MAS, MENOS; 
precedence left POR, DIV; 
//precedence left IGUAL,ID;
//precedence left LPAREN,RPAREN;
//precedence left ID,LEER;
//precedence left SI, ENTONCES;

//-------- [4] CUARTA SECCION  'Gramatica'


//S ::= INICIO S|TEXTO S |FIN ;
/*
color en ansi
AnsiConsole.out.println(Ansi.ansi().bold().fg(Ansi.Color.RED).a("Hello").fg(Ansi.Color.GREEN).a(" World").fg(Ansi.Color.WHITE).a("!"));
AnsiConsole.out.println(Ansi.ansi().reset());
*/
//TEST2
S             ::= INICIO inst_1 {:System.exit(1);:} FIN | INICIO {:System.exit(1);:} FIN;
inst_1        ::= inst_leer inst_1| inst_escribir inst_1;
inst_leer     ::= LEER LPAREN ID RPAREN;
inst_escribir ::= ESCRIBIR LPAREN TEXTO:t 
{:AnsiConsole.out.println(Ansi.ansi().bold().fg(Ansi.Color.GREEN).a(t));//imprime texto en color verde
  AnsiConsole.out.print(Ansi.ansi().reset()); :} RPAREN;






/* GRAMATICA FINAL
S         ::=   INICIO inst_1 FIN ;
inst_1    ::=   inst_2
              | inst_1
                {:System.out.println(ANSI_YELLOW+"inst_1"+ANSI_RESET);:}
                inst_2
                {:System.out.println(ANSI_CYAN+"inst_2"+ANSI_RESET);:}
              ;
inst_2    ::=   inst_leer                     
              | inst_escribir       
              | inst_si            
              | inst_asig;
inst_si   ::=   SI cond ENTONCES inst_2;
inst_leer ::=   LEER LPAREN ID RPAREN{:new java.util.Scanner(System.in).nextLine();:};
inst_escribir ::= ESCRIBIR LPAREN ID:i RPAREN {:System.out.println(i);:}
			| ESCRIBIR LPAREN  TEXTO RPAREN
      ;
inst_asig ::=   ID:i IGUAL exp:e  {:System.out.println(i+"->"+e);:};

exp       ::=   exp MAS exp                   
              | exp POR exp           
              | exp MENOS exp       
              | exp DIV exp
              | ID                          
              | CONST;
cond      ::=   exp MENOR exp | exp MAYOR exp | exp IGUAL exp;
*/