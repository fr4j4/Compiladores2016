//-------- [1] PRIMERA SECCION 'Declaraciones preliminares'
import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import org.fusesource.jansi.*;
import  org.fusesource.jansi.*;

parser code {:
    Hashtable <String,Integer> intVars;
    boolean execute=true;
    public void pushVar(String varName,int value){
      System.out.println(Ansi.ansi().render("@|cyan "+varName+"|@ = @|yellow "+value+"|@"));
        intVars.put(varName,value);
    }

    public Integer getValue(String id){//obtiene el valor de una variable si es que existe
        Integer i= intVars.get(id);
        //System.out.println("Value of "+id+" is "+i);
        return new Integer(i);
    }

    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" en linea "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", columna "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};


init with {:
    AnsiConsole.systemInstall();
    intVars=new Hashtable<String,Integer>(); 
:};//codigo que se ejecuta al iniciar


//-------- [2] SEGUNDA SECCION 'Declaracion de terminales y no-terminales'
    terminal          MENOS;
    terminal          MAS;
    terminal          DIV;
    terminal          POR;
    terminal          LPAREN;
    terminal          RPAREN;
    terminal          FIN;
    terminal          SI;
    terminal          ENTONCES;
    terminal          LEER;
    terminal          MENOR; 
    terminal          MAYOR;
    terminal          PCOMA;
    terminal          TEXTO;
    terminal          ENTER;
    terminal          ASIGN;

    terminal          IGUAL;
    terminal          INICIO;
    terminal  String  ID;
    terminal  Integer CONST;
    terminal          ESCRIBIR;

non terminal          S;
non terminal          inst;
non terminal          inst_aux;
non terminal          inst_leer;
non terminal          inst_escribir;
non terminal          inst_si;
non terminal          inst_asig;
non terminal          cond;
non terminal  Integer exp;

//-------- [3] TERCERA SECCION 'Precedencia y asociatividad de terminales'

precedence left MAS, MENOS; 
precedence left POR, DIV;

start with S;

S               ::= INICIO inst {::}  FIN | INICIO {:System.exit(1);:} FIN;

inst          ::= inst_escribir inst
                | inst_asig inst
                | inst_si inst
                | inst_leer inst
                
;

inst_leer       ::= LEER LPAREN ID:var RPAREN 
                    {:
                        if(execute){
                            System.out.print(Ansi.ansi().render("@|green ingrese valor para "+var+": |@"));
                            java.util.Scanner s=new java.util.Scanner(System.in);
                            String x=s.next();
                            s.nextLine();
                            Integer i=new Integer(Integer.parseInt(x));
                            pushVar(var,i);
                        }
                    :}
                    PCOMA;

inst_escribir   ::= ESCRIBIR LPAREN TEXTO:t RPAREN
                    {: if(execute) System.out.println( Ansi.ansi().render("@|green \""+t+"\"|@") );:} 
                    PCOMA
                  | ESCRIBIR LPAREN exp:e RPAREN
                    {: if(execute) System.out.println( Ansi.ansi().render("@|green "+e+"|@") ); :}
                    PCOMA                   
;

inst_asig       ::= ID:var ASIGN exp:e
                    {: if(execute) pushVar(var,e);:} 
                    PCOMA
;

inst_si         ::= SI cond:c{:execute=true;if(c==false){execute=false;};:} ENTONCES inst_aux {:execute=true;:}
                    {:
                     // if(c.booleanValue()==true){RESULT=1;System.out.println("A");}else{RESULT=null;System.out.println("A");}
                    :} 
                    
;

inst_aux        ::=  inst_asig
                    |inst_escribir
                    |inst_leer;

cond            ::= exp:e1 MENOR exp:e2   {:RESULT=e1.intValue()<e2.intValue();:}
                  | exp:e1 MAYOR exp:e2   {:RESULT=e1.intValue()>e2.intValue();:}
                  | exp:e1 IGUAL exp:e2   {:RESULT=(e1.intValue()==e2.intValue());:}
;

exp             ::=   exp:e1 MAS exp:e2   {:RESULT=(e1.intValue()+e2.intValue());:}
                    | exp:e1 POR exp:e2   {:RESULT=(e1.intValue()*e2.intValue());:}
                    | exp:e1 MENOS exp:e2 {:RESULT=(e1.intValue()-e2.intValue());:}
                    | exp:e1 DIV exp:e2   {:RESULT=(e1.intValue()/e2.intValue());:}
                    | ID:id               {:RESULT=getValue(id);:}        
                    | CONST:v             {:RESULT=v;:}
;